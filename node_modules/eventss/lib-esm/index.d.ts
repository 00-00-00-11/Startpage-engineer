import { Cancellable, Callback } from "ambients-utils";
declare type DOMElement = Element | Window | Document;
export declare class Eventss<T> {
    private eventMap;
    private stateValue;
    private stateEmitted;
    private debounceMap;
    off(name: string): this;
    on(name: Array<string> | string, cb: Callback<T | undefined>, persistent?: boolean): Cancellable;
    once(name: string | Array<string>, cb: Callback<T | undefined>, persistent?: boolean): Cancellable;
    emit(name: string, value?: T, force?: boolean): this;
    emitState(name: string, value?: T): this;
    cancelState(name: string): this;
    private emitDebounceMap;
    private emitDebounceValueMap;
    emitDebounce(duration: number, name: string, value?: T): this;
    private timeMap;
    emitLeadingDebounce(duration: number, name: string, value?: T): this;
    debounce(name: string, duration: number): this;
    reset(): this;
    private loop;
    from(name: string, newName?: string): this;
    from(el: DOMElement | Eventss<any>, name: string | Array<string>, newName?: string): this;
}
export {};
